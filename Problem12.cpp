/*

Project Euler Problem #12

Writen By Alan Bishop on 6/1/14


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

#include <stdio.h>
#include <math.h>

void Problem12(void);
int getNumDivisors(unsigned long int n);

int main(int argc, char * argv[])
{
    Problem12();
    return 0;
}

void Problem12(void)
{
    int numDivisors = 0;
    unsigned long int triangleNumber = 0;
    int highDivisors = 0;
    for(int i = 1;numDivisors < 501; ++i )
    {
        triangleNumber+=i;
        numDivisors = getNumDivisors(triangleNumber);
        if(numDivisors > highDivisors)
        {
            highDivisors = numDivisors;
            printf("New high num = %d\n",highDivisors);
        }
    }
    printf("The first triangle number with over 100 divisors is %ld\n",triangleNumber);
}

int getNumDivisors(unsigned long int n)
{
    int numDivisors = 2;
    for(unsigned long int i = 2; i <= sqrt(n); ++i)
    {
        if(n%i==0) numDivisors+=2;
    }
    if(sqrt(n)*sqrt(n) == n) ++numDivisors;
    return numDivisors;
}
